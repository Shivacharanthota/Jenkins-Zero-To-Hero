pipeline {
  agent {
    docker {
      image 'charan8096/maven-charan-docker-agent:v4'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  stages {
    stage('Checkout') {
      steps {
        // This will checkout the Jenkinsfile and your code
        checkout scm
      }
    }

    stage('Build and Test') {
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          // Now we're inside the folder with the pom.xml
          sh 'mvn clean package'
        }
      }
    }

    // stage('Static Code Analysis') {
     // environment {
      //  SONAR_URL = "http://4.247.148.57:9000"
      // }
      // steps {
        // withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          // dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
           // sh "mvn sonar:sonar -Dsonar.login=${SONAR_AUTH_TOKEN} -Dsonar.host.url=${SONAR_URL}"
         // }
       // }
     // }
   // }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "charan8096/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
            sh "docker build -t ${DOCKER_IMAGE} ."
          }
          def image = docker.image(DOCKER_IMAGE)
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            image.push()
          }
        }
      }
    }

    // (Optional) Re-enable this when you want to update your k8s manifests
    // stage('Update Deployment File') { â€¦ }
  }

  post {
    always { cleanWs() }
  }
}
